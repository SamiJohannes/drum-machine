{"version":3,"sources":["assets sync nonrecursive /.wav$","assets/421__tictacshutup__prac-hat-2.wav","assets/424__tictacshutup__prac-hat-open-3.wav","assets/427__tictacshutup__prac-kick-light.wav","assets/428__tictacshutup__prac-kick.wav","assets/429__tictacshutup__prac-perc-1.wav","assets/430__tictacshutup__prac-perc-2.wav","assets/438__tictacshutup__prac-sidestick.wav","assets/439__tictacshutup__prac-snare-2.wav","assets/445__tictacshutup__prac-snare-roll-short.wav","components/DrumPad.js","components/Display.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","DrumPad","props","keyPads","innerKey","x","index","className","desc","onClick","document","getElementById","pad","cloneNode","play","key","toString","src","clip","onPlay","Display","playedClip","App","r","state","audioPlaying","data","soundfiles","require","handleClick","bind","playing","this","setState","console","log","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ba8e4d50.chunk.js","sourcesContent":["var map = {\n\t\"./421__tictacshutup__prac-hat-2.wav\": 19,\n\t\"./424__tictacshutup__prac-hat-open-3.wav\": 20,\n\t\"./427__tictacshutup__prac-kick-light.wav\": 21,\n\t\"./428__tictacshutup__prac-kick.wav\": 22,\n\t\"./429__tictacshutup__prac-perc-1.wav\": 23,\n\t\"./430__tictacshutup__prac-perc-2.wav\": 24,\n\t\"./438__tictacshutup__prac-sidestick.wav\": 25,\n\t\"./439__tictacshutup__prac-snare-2.wav\": 26,\n\t\"./445__tictacshutup__prac-snare-roll-short.wav\": 27\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 18;","module.exports = __webpack_public_path__ + \"static/media/421__tictacshutup__prac-hat-2.22261813.wav\";","module.exports = __webpack_public_path__ + \"static/media/424__tictacshutup__prac-hat-open-3.75d16f10.wav\";","module.exports = __webpack_public_path__ + \"static/media/427__tictacshutup__prac-kick-light.62ee8ee9.wav\";","module.exports = __webpack_public_path__ + \"static/media/428__tictacshutup__prac-kick.823f8796.wav\";","module.exports = __webpack_public_path__ + \"static/media/429__tictacshutup__prac-perc-1.085a68b3.wav\";","module.exports = __webpack_public_path__ + \"static/media/430__tictacshutup__prac-perc-2.3c64f65c.wav\";","module.exports = __webpack_public_path__ + \"static/media/438__tictacshutup__prac-sidestick.0b2bce50.wav\";","module.exports = __webpack_public_path__ + \"static/media/439__tictacshutup__prac-snare-2.e61e5f83.wav\";","module.exports = __webpack_public_path__ + \"static/media/445__tictacshutup__prac-snare-roll-short.83f2a8cc.wav\";","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './DrumPad.css'\r\n\r\nfunction DrumPad (props) {\r\n  const data = props.innerKey\r\n  const keyPads = data.map((x, index) =>\r\n    <button className='drum-pad' id={x.desc} onClick={() => document.getElementById(x.pad).cloneNode().play()} key={x.pad.toString()}>\r\n      {x.pad}\r\n      <audio id={x.pad} className='clip' src={props.clip[index]} onPlay={() => props.onPlay(x.desc)} />\r\n    </button>\r\n  )\r\n\r\n  return <div className='drum-pads'>{keyPads}</div>\r\n}\r\n\r\nDrumPad.propTypes = {\r\n  id: PropTypes.string,\r\n  onPlay: PropTypes.func,\r\n  innerKey: PropTypes.array,\r\n  clip: PropTypes.array\r\n}\r\nexport default DrumPad\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './Display.css'\r\n\r\nconst Display = (props) =>\r\n  <div className='display'>\r\n    {props.playedClip}\r\n  </div>\r\n\r\nDisplay.propTypes = {\r\n  playedClip: PropTypes.string\r\n}\r\nexport default Display\r\n","import React from 'react'\r\nimport './App.css'\r\nimport DrumPad from './components/DrumPad'\r\nimport Display from './components/Display'\r\n\r\nclass App extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state =\r\n    {\r\n      audioPlaying: ''\r\n    }\r\n    function importAll (r) {\r\n      return r.keys().map(r)\r\n    }\r\n    this.data = [{ pad: 'q', desc: 'hat-2' },\r\n      { pad: 'w', desc: 'hat-open-3' },\r\n      { pad: 'e', desc: 'kick-light' },\r\n      { pad: 'a', desc: 'kick' },\r\n      { pad: 's', desc: 'perc-1' },\r\n      { pad: 'd', desc: 'perc-2' },\r\n      { pad: 'z', desc: 'sidetick' },\r\n      { pad: 'x', desc: 'snare-2' },\r\n      { pad: 'c', desc: 'snare-roll-short' }\r\n    ]\r\n    this.soundfiles = importAll(require.context('./assets', false, /\\.wav$/))\r\n    this.handleClick = this.handleClick.bind(this)\r\n  }\r\n\r\n  handleClick (e) {\r\n  //  const playClip = document.getElementById()\r\n  //  console.log(playClip)\r\n    const playing = e\r\n    this.setState({ audioPlaying: playing })\r\n    console.log(e, playing)\r\n  }\r\n\r\n  render () {\r\n    const keyPads = this.data\r\n    return (\r\n      <div id='drum-machine'>\r\n        <Display id='display' playedClip={this.state.audioPlaying} />\r\n        <DrumPad onPlay={this.handleClick} innerKey={keyPads} clip={this.soundfiles} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n/* eslint-env serviceworker */\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\nexport function register (config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW (swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.')\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker (swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type')\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister () {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister()\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}